package com.sap.oss.phosphor.fosstars.model.score.oss;

import static com.sap.oss.phosphor.fosstars.TestUtils.DELTA;
import static com.sap.oss.phosphor.fosstars.TestUtils.assertScore;
import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.VULNERABILITIES_IN_PROJECT;
import static com.sap.oss.phosphor.fosstars.model.other.Utils.setOf;
import static com.sap.oss.phosphor.fosstars.model.value.Vulnerability.Builder.newVulnerability;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import com.sap.oss.phosphor.fosstars.model.Score;
import com.sap.oss.phosphor.fosstars.model.Value;
import com.sap.oss.phosphor.fosstars.model.other.Utils;
import com.sap.oss.phosphor.fosstars.model.value.CVSS;
import com.sap.oss.phosphor.fosstars.model.value.CVSS.V3.Impact;
import com.sap.oss.phosphor.fosstars.model.value.Vulnerabilities;
import com.sap.oss.phosphor.fosstars.model.value.Vulnerability.Resolution;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.util.Locale;
import java.util.Set;
import org.junit.Test;

public class VulnerabilityLifetimeScoreTest {

  private static final VulnerabilityLifetimeScore SCORE = new VulnerabilityLifetimeScore();

  private static final SimpleDateFormat DATE_FORMAT
      = new SimpleDateFormat("dd/MM/yyyy", Locale.US);

  @Test
  public void calculateForAllUnknown() {
    assertTrue(SCORE.calculate(Utils.allUnknown(SCORE.allFeatures())).isUnknown());
  }

  @Test
  public void testCalculate() throws ParseException {
    Set<Value<?>> values = setOf(
        VULNERABILITIES_IN_PROJECT.value(new Vulnerabilities(
            newVulnerability("CVE-2020-001")
                .description("Test")
                .set(new CVSS.V3(10.0, Impact.HIGH, Impact.LOW, Impact.NONE))
                .set(Resolution.PATCHED)
                .introduced(DATE_FORMAT.parse("01/01/2020"))
                .fixed(DATE_FORMAT.parse("01/05/2020"))
                .make()
        )));
    assertScore(Score.INTERVAL, SCORE, values);
  }

  @Test
  public void testFactorOf() {
    assertEquals(0.01, VulnerabilityLifetimeScore.factorOf(Duration.ofDays(4)), DELTA);
    assertEquals(0.1, VulnerabilityLifetimeScore.factorOf(Duration.ofDays(85)), DELTA);
    assertEquals(0.3, VulnerabilityLifetimeScore.factorOf(Duration.ofDays(400)), DELTA);
  }
}