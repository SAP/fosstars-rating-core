package com.sap.oss.phosphor.fosstars.model.value;

import static com.sap.oss.phosphor.fosstars.model.value.Vulnerability.Builder.extractVulnerableArtifacts;
import static com.sap.oss.phosphor.fosstars.model.value.Vulnerability.Builder.newVulnerability;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import com.sap.oss.phosphor.fosstars.model.value.Vulnerability.Resolution;
import com.sap.oss.phosphor.fosstars.nvd.data.Configurations;
import com.sap.oss.phosphor.fosstars.nvd.data.Cpe23Uri;
import com.sap.oss.phosphor.fosstars.nvd.data.CpeMatch;
import com.sap.oss.phosphor.fosstars.nvd.data.Node;
import com.sap.oss.phosphor.fosstars.nvd.data.NvdEntry;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import org.junit.Test;

public class VulnerabilityTest {

  @Test(expected = IllegalArgumentException.class)
  public void testConfusingResolution() {
    new Vulnerability("CVE-1", "test", CVSS.v2(5.0), Collections.emptyList(), Resolution.UNPATCHED,
        new Date(1), new Date(2), new Date(3), Collections.emptyList());
  }

  @Test(expected = IllegalArgumentException.class)
  public void testConfusingIntroducedDate() {
    new Vulnerability("CVE-1", "test", CVSS.v2(5.0), Collections.emptyList(), Resolution.UNPATCHED,
        new Date(2), new Date(1), new Date(3), Collections.emptyList());
  }

  @Test(expected = IllegalArgumentException.class)
  public void testConfusingPublishedDate() {
    new Vulnerability("CVE-1", "test", CVSS.v2(5.0), Collections.emptyList(), Resolution.UNPATCHED,
        new Date(4), new Date(3), new Date(2), Collections.emptyList());
  }

  @Test
  public void testConstructor() {
    Vulnerability vulnerability = newVulnerability("CVE-2019-0001").make();
    assertEquals("CVE-2019-0001", vulnerability.id());
    assertEquals(Optional.empty(), vulnerability.description());
    assertEquals(CVSS.UNKNOWN, vulnerability.cvss());
    assertEquals(Collections.emptyList(), vulnerability.references());
    assertEquals(Resolution.UNKNOWN, vulnerability.resolution());
    assertEquals(Optional.empty(), vulnerability.introduced());
    assertEquals(Optional.empty(), vulnerability.fixed());
  }

  @Test
  public void testExtractVulnerableArtifacts() {
    String startVersion = "1.0.0";
    String endVersion = "1.1.0";

    Node node = mock(Node.class);
    CpeMatch cpeMatch = mock(CpeMatch.class);
    Cpe23Uri cpe23Uri = new Cpe23Uri("cpe:2.3:o:juniper:junos:16.1:-:*:*:*:*:*:*");
    when(cpeMatch.getCpeUri()).thenReturn(cpe23Uri);
    when(cpeMatch.getVersionStartIncluding()).thenReturn(startVersion);
    when(cpeMatch.getVersionEndIncluding()).thenReturn(endVersion);
    when(node.getCpeMatches()).thenReturn(Arrays.asList(cpeMatch));

    NvdEntry nvdEntry = mock(NvdEntry.class);
    Configurations configurations = mock(Configurations.class);
    when(configurations.getNodes()).thenReturn(Arrays.asList(node));
    when(nvdEntry.getConfigurations()).thenReturn(configurations);

    List<VulnerableArtifact> vulnerableArtifacts = extractVulnerableArtifacts(nvdEntry);
    assertFalse(vulnerableArtifacts.isEmpty());
    assertEquals(1, vulnerableArtifacts.size());
    assertEquals("junos", vulnerableArtifacts.get(0).product());
    assertEquals("juniper", vulnerableArtifacts.get(0).vendor());
    assertTrue(startVersion,
        vulnerableArtifacts.get(0).versionRange().versionStartIncluding().isPresent());
    assertEquals(startVersion,
        vulnerableArtifacts.get(0).versionRange().versionStartIncluding().get());
    assertTrue(endVersion,
        vulnerableArtifacts.get(0).versionRange().versionEndIncluding().isPresent());
    assertEquals(endVersion, vulnerableArtifacts.get(0).versionRange().versionEndIncluding().get());
    assertFalse(vulnerableArtifacts.get(0).versionRange().versionStartExcluding().isPresent());
    assertFalse(vulnerableArtifacts.get(0).versionRange().versionEndExcluding().isPresent());
  }
}