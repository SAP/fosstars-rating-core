package com.sap.oss.phosphor.fosstars.model.score.oss;

import static com.sap.oss.phosphor.fosstars.TestUtils.assertScore;
import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.ARTIFACT_VERSION;
import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.VULNERABILITIES_IN_ARTIFACT;

import com.sap.oss.phosphor.fosstars.TestUtils;
import com.sap.oss.phosphor.fosstars.model.Score;
import com.sap.oss.phosphor.fosstars.model.other.Utils;
import com.sap.oss.phosphor.fosstars.model.value.ArtifactVersion;
import com.sap.oss.phosphor.fosstars.model.value.Vulnerabilities;
import com.sap.oss.phosphor.fosstars.model.value.Vulnerability;
import java.time.LocalDateTime;
import java.util.Collections;
import org.junit.Test;

public class ArtifactVersionVulnerabilityScoreTest {

  @Test
  public void testNotVulnerableVersion() {
    Vulnerability vulnerability =
        TestUtils.createBasicVulnerability(9.0, "1.0.0", "1.2.0");
    assertScore(
        Score.MAX,
        new ArtifactVersionVulnerabilityScore(),
        Utils.setOf(
            VULNERABILITIES_IN_ARTIFACT.value(new Vulnerabilities(vulnerability)),
            ARTIFACT_VERSION.value(new ArtifactVersion("2.0.0", LocalDateTime.now()))));
  }

  @Test
  public void testLowSeverityVulnerability() {
    Vulnerability vulnerability =
        TestUtils.createBasicVulnerability(2.0, "1.0.0", "2.2.0");
    assertScore(
        8.0,
        new ArtifactVersionVulnerabilityScore(),
        Utils.setOf(
            VULNERABILITIES_IN_ARTIFACT.value(new Vulnerabilities(vulnerability)),
            ARTIFACT_VERSION.value(new ArtifactVersion("2.0.0", LocalDateTime.now()))));
  }

  @Test
  public void testThreeLowSeverityVulnerability() {
    Vulnerability vulnerabilityOne =
        TestUtils.createBasicVulnerability(2.0, "1.0.0", "2.2.0");
    Vulnerability vulnerabilityTwo =
        TestUtils.createBasicVulnerability(2.0, "1.0.0", "2.2.0");
    Vulnerability vulnerabilityThree =
        TestUtils.createBasicVulnerability(2.0, "1.0.0", "2.2.0");
    assertScore(
        4.0,
        new ArtifactVersionVulnerabilityScore(),
        Utils.setOf(
            VULNERABILITIES_IN_ARTIFACT.value(
                new Vulnerabilities(vulnerabilityOne, vulnerabilityTwo, vulnerabilityThree)),
            ARTIFACT_VERSION.value(new ArtifactVersion("2.0.0", LocalDateTime.now()))));
  }

  @Test
  public void testMidSeverityVulnerability() {
    Vulnerability vulnerabilityOne =
        TestUtils.createBasicVulnerability(5.0, "1.0.0", "2.2.0");
    assertScore(
        5.0,
        new ArtifactVersionVulnerabilityScore(),
        Utils.setOf(
            VULNERABILITIES_IN_ARTIFACT.value(
                new Vulnerabilities(vulnerabilityOne)),
            ARTIFACT_VERSION.value(new ArtifactVersion("2.0.0", LocalDateTime.now()))));
  }

  @Test
  public void testThreeMidSeverityVulnerability() {
    Vulnerability vulnerabilityOne =
        TestUtils.createBasicVulnerability(4.5, "1.0.0", "2.2.0");
    Vulnerability vulnerabilityTwo =
        TestUtils.createBasicVulnerability(5.0, "1.0.0", "2.2.0");
    Vulnerability vulnerabilityThree =
        TestUtils.createBasicVulnerability(6.0, "1.0.0", "2.2.0");
    assertScore(
        Score.MIN,
        new ArtifactVersionVulnerabilityScore(),
        Utils.setOf(
            VULNERABILITIES_IN_ARTIFACT.value(
                new Vulnerabilities(vulnerabilityOne, vulnerabilityTwo, vulnerabilityThree)),
            ARTIFACT_VERSION.value(new ArtifactVersion("2.0.0", LocalDateTime.now()))));
  }

  @Test
  public void testHighSeverityVulnerability() {
    Vulnerability vulnerabilityOne =
        TestUtils.createBasicVulnerability(9.0, "1.0.0", "2.2.0");
    assertScore(
        Score.MIN,
        new ArtifactVersionVulnerabilityScore(),
        Utils.setOf(
            VULNERABILITIES_IN_ARTIFACT.value(
                new Vulnerabilities(vulnerabilityOne)),
            ARTIFACT_VERSION.value(new ArtifactVersion("2.0.0", LocalDateTime.now()))));
  }

  @Test
  public void testMixedSeverityVulnerability() {
    Vulnerability vulnerabilityOne =
        TestUtils.createBasicVulnerability(2.0, "1.0.0", "2.2.0");
    Vulnerability vulnerabilityTwo =
        TestUtils.createBasicVulnerability(6.0, "1.0.0", "2.2.0");
    Vulnerability vulnerabilityThree =
        TestUtils.createBasicVulnerability(9.0, "1.0.0", "2.2.0");
    assertScore(
        Score.MIN,
        new ArtifactVersionVulnerabilityScore(),
        Utils.setOf(
            VULNERABILITIES_IN_ARTIFACT.value(
                new Vulnerabilities(vulnerabilityOne, vulnerabilityTwo, vulnerabilityThree)),
            ARTIFACT_VERSION.value(new ArtifactVersion("2.0.0", LocalDateTime.now()))));
  }

  @Test
  public void testNoVulnerabilityEtAll() {
    assertScore(
        8.0,
        new ArtifactVersionVulnerabilityScore(),
        Utils.setOf(
            VULNERABILITIES_IN_ARTIFACT.value(new Vulnerabilities(Collections.emptySet())),
            ARTIFACT_VERSION.value(new ArtifactVersion("2.0.0", LocalDateTime.now()))));
  }
}