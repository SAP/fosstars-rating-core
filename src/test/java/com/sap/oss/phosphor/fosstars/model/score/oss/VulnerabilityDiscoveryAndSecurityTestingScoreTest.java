package com.sap.oss.phosphor.fosstars.model.score.oss;

import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.VULNERABILITIES_IN_PROJECT;
import static com.sap.oss.phosphor.fosstars.model.value.Vulnerability.Builder.newVulnerability;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import com.sap.oss.phosphor.fosstars.model.Score;
import com.sap.oss.phosphor.fosstars.model.Value;
import com.sap.oss.phosphor.fosstars.model.other.Utils;
import com.sap.oss.phosphor.fosstars.model.value.ScoreValue;
import com.sap.oss.phosphor.fosstars.model.value.Vulnerabilities;
import java.util.Date;
import java.util.Set;
import org.junit.Test;

public class VulnerabilityDiscoveryAndSecurityTestingScoreTest {

  private static final ProjectSecurityTestingScore PROJECT_SECURITY_TESTING_SCORE
      = new ProjectSecurityTestingScore();

  private static final VulnerabilityDiscoveryAndSecurityTestingScore SCORE
      = new VulnerabilityDiscoveryAndSecurityTestingScore(PROJECT_SECURITY_TESTING_SCORE);

  @Test(expected = IllegalArgumentException.class)
  public void testWithNoVulnerabilitiesInfo() {
    ScoreValue securityTestingScoreValue = new ScoreValue(PROJECT_SECURITY_TESTING_SCORE);
    SCORE.calculate(securityTestingScoreValue);
  }

  @Test
  public void testCalculate() {
    Set<Value<?>> values = OssSecurityScoreTest.defaultValues();
    values.add(VULNERABILITIES_IN_PROJECT.value(
        new Vulnerabilities(
            newVulnerability("CVE-1")
                .published(new Date())
                .make())));
    ScoreValue scoreValue = SCORE.calculate(values);
    assertFalse(scoreValue.isUnknown());
    assertFalse(scoreValue.isNotApplicable());
    assertTrue(Score.INTERVAL.contains(scoreValue.get()));
  }

  @Test
  public void testCalculateWithAllUnknown() {
    assertTrue(SCORE.calculate(Utils.allUnknown(SCORE.allFeatures())).isUnknown());
  }
}