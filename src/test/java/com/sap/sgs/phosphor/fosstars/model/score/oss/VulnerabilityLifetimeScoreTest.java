package com.sap.sgs.phosphor.fosstars.model.score.oss;

import static com.sap.sgs.phosphor.fosstars.TestUtils.assertScore;
import static com.sap.sgs.phosphor.fosstars.model.feature.oss.OssFeatures.VULNERABILITIES;
import static com.sap.sgs.phosphor.fosstars.model.other.Utils.setOf;
import static com.sap.sgs.phosphor.fosstars.model.value.Vulnerability.Builder.newVulnerability;
import static org.junit.Assert.assertEquals;

import com.sap.sgs.phosphor.fosstars.model.Score;
import com.sap.sgs.phosphor.fosstars.model.Value;
import com.sap.sgs.phosphor.fosstars.model.other.Utils;
import com.sap.sgs.phosphor.fosstars.model.value.CVSS;
import com.sap.sgs.phosphor.fosstars.model.value.Vulnerabilities;
import com.sap.sgs.phosphor.fosstars.model.value.Vulnerability.Resolution;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.util.Locale;
import java.util.Set;
import org.junit.Test;

public class VulnerabilityLifetimeScoreTest {

  private static final double PRECISION = 0.01;

  private static final VulnerabilityLifetimeScore VULNERABILITY_LIFETIME_SCORE
      = new VulnerabilityLifetimeScore();

  private static final SimpleDateFormat DATE_FORMAT
      = new SimpleDateFormat("dd/MM/yyyy", Locale.US);

  @Test
  public void calculateForAllUnknown() {
    assertScore(
        Score.MIN,
        VULNERABILITY_LIFETIME_SCORE,
        Utils.allUnknown(VULNERABILITY_LIFETIME_SCORE.allFeatures()));
  }

  @Test
  public void calculate() throws ParseException {
    Set<Value> values = setOf(
        VULNERABILITIES.value(new Vulnerabilities(
            newVulnerability("CVE-2020-001")
                .description("Test")
                .set(CVSS.v3(10.0))
                .set(Resolution.PATCHED)
                .introduced(DATE_FORMAT.parse("01/01/2020"))
                .fixed(DATE_FORMAT.parse("01/05/2020"))
                .make()
        )));
    assertScore(Score.INTERVAL, VULNERABILITY_LIFETIME_SCORE, values);
  }

  @Test
  public void factorFor() {
    assertEquals(0.01, VulnerabilityLifetimeScore.factorOf(Duration.ofDays(4)), PRECISION);
    assertEquals(0.1, VulnerabilityLifetimeScore.factorOf(Duration.ofDays(85)), PRECISION);
    assertEquals(0.3, VulnerabilityLifetimeScore.factorOf(Duration.ofDays(400)), PRECISION);
  }
}