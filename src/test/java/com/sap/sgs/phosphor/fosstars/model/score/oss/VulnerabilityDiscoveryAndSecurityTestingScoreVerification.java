package com.sap.sgs.phosphor.fosstars.model.score.oss;

import static com.sap.sgs.phosphor.fosstars.model.feature.oss.OssFeatures.VULNERABILITIES;
import static com.sap.sgs.phosphor.fosstars.model.qa.TestVectorBuilder.newTestVector;
import static com.sap.sgs.phosphor.fosstars.model.value.Vulnerability.Builder.newVulnerability;

import com.sap.sgs.phosphor.fosstars.model.math.DoubleInterval;
import com.sap.sgs.phosphor.fosstars.model.other.Utils;
import com.sap.sgs.phosphor.fosstars.model.qa.ScoreVerification;
import com.sap.sgs.phosphor.fosstars.model.qa.TestVectors;
import com.sap.sgs.phosphor.fosstars.model.qa.VerificationFailedException;
import com.sap.sgs.phosphor.fosstars.model.value.ScoreValue;
import com.sap.sgs.phosphor.fosstars.model.value.Vulnerabilities;
import java.sql.Date;
import java.time.Duration;
import java.time.Instant;
import org.junit.Test;

public class VulnerabilityDiscoveryAndSecurityTestingScoreVerification {

  private static final Duration SOME_TIME_AGO = Duration.ofDays(30);

  private static final Duration LONG_TIME_AGO = Duration.ofDays(1000);

  private static final Vulnerabilities RECENT_VULNERABILITIES = new Vulnerabilities(
      newVulnerability("CVE-02")
          .published(Date.from(Instant.now().minus(SOME_TIME_AGO)))
          .make(),
      newVulnerability("CVE-01")
          .published(Date.from(Instant.now().minus(LONG_TIME_AGO)))
          .make()
  );

  private static final Vulnerabilities NO_RECENT_VULNERABILITIES = new Vulnerabilities(
      newVulnerability("CVE-01")
          .published(Date.from(Instant.now().minus(LONG_TIME_AGO)))
          .make()
  );

  private static ProjectSecurityTestingScore SECURITY_TESTING_SCORE
      = new ProjectSecurityTestingScore();

  private static final TestVectors TEST_VECTORS = new TestVectors(
      newTestVector("all unknown")
          .set(Utils.allUnknown(SECURITY_TESTING_SCORE.allFeatures()))
          .set(VULNERABILITIES.unknown())
          .expectedScore(DoubleInterval.closed(0, 1))
          .make(),
      newTestVector("unknown security testing")
          .set(Utils.allUnknown(SECURITY_TESTING_SCORE.allFeatures()))
          .set(VULNERABILITIES.value(RECENT_VULNERABILITIES))
          .expectedScore(DoubleInterval.closed(0, 1))
          .make(),
      newTestVector("unknown vulnerabilities")
          .set(SECURITY_TESTING_SCORE.value(5.0))
          .set(VULNERABILITIES.unknown())
          .expectedScore(DoubleInterval.closed(0, 1))
          .make(),
      newTestVector("security testing not applicable")
          .set(new ScoreValue(SECURITY_TESTING_SCORE).makeNotApplicable())
          .set(VULNERABILITIES.value(RECENT_VULNERABILITIES))
          .expectNotApplicableScore()
          .make(),
      newTestVector("bad testing and recent vulnerabilities")
          .set(SECURITY_TESTING_SCORE.value(1.0))
          .set(VULNERABILITIES.value(RECENT_VULNERABILITIES))
          .expectedScore(DoubleInterval.closed(0, 1))
          .make(),
      newTestVector("bad testing and no recent vulnerabilities")
          .set(SECURITY_TESTING_SCORE.value(1.0))
          .set(VULNERABILITIES.value(NO_RECENT_VULNERABILITIES))
          .expectedScore(DoubleInterval.closed(1, 3))
          .make(),
      newTestVector("good testing and recent vulnerabilities")
          .set(SECURITY_TESTING_SCORE.value(9.0))
          .set(VULNERABILITIES.value(RECENT_VULNERABILITIES))
          .expectedScore(DoubleInterval.closed(7, 9))
          .make(),
      newTestVector("good testing and no recent vulnerabilities")
          .set(SECURITY_TESTING_SCORE.value(9.0))
          .set(VULNERABILITIES.value(NO_RECENT_VULNERABILITIES))
          .expectedScore(DoubleInterval.closed(9, 10))
          .make()
  );

  @Test
  public void verify() throws VerificationFailedException {
    VulnerabilityDiscoveryAndSecurityTestingScore score
        = new VulnerabilityDiscoveryAndSecurityTestingScore(SECURITY_TESTING_SCORE);
    new ScoreVerification(score, TEST_VECTORS).run();
  }

}
