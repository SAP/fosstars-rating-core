---
If a project uses LGTM checks for commits:
  - advice: >
      You can ask the project maintainers to enable LGTM checks for pull requests in the project.
    links:
      - name: How to enable LGTM checks for pull requests
        url: https://lgtm.com/help/lgtm/about-automated-code-review
If a project runs CodeQL checks for commits:
  - advice: >
      You can open a pull request to enable CodeQL scans in the project.
      Make sure that the scans are run on pull requests.
    links:
      - name: How to enable CodeQL checks for pull requests
        url: https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/enabling-code-scanning-for-a-repository#enabling-code-scanning-using-actions
If a project runs CodeQL scans:
  - advice: >
      You can open a pull request to enable CodeQL scans in the project.
    links:
      - name: How to enable CodeQL checks
        url: https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/enabling-code-scanning-for-a-repository#enabling-code-scanning-using-actions
The worst LGTM grade of a project:
  - advice: >
      You can fix the issues reported by LGTM for the project.
    links:
      - name: List of issues on LGTM
        url: ${LGTM_PROJECT_LINK}
If an open-source project has a security policy:
  - advice: >
      You can open a pull request to add a security policy for the project.
    links:
      - name: About adding a security policy to a repository on GitHub
        url: https://docs.github.com/en/free-pro-team@latest/github/managing-security-vulnerabilities/adding-a-security-policy-to-your-repository
      - name: An example of a security policy
        url: https://github.com/apache/nifi/blob/main/SECURITY.md
      - name: Suggest a security policy for the project
        url: ${SUGGEST_SECURITY_POLICY_ON_GITHUB}
If an open-source project uses FindSecBugs:
  - advice: >
      You can open a pull request to enable FindSecBugs for the project.
    links:
      - name: FindSecBugs home page
        url: https://find-sec-bugs.github.io/
If a project runs Bandit scans:
  - advice: >
      You can open a pull request to run Bandit scans in the project using GitHub action workflow.
    links:
      - name: GitHub workflow action job config to run Bandit code scanning for a repository.
        url: https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#jobsjob_idstepsrun
      - name: An example to run Bandit scan check as part of GitHub action workflow.
        url: https://github.com/TNLinc/CV/blob/main/.github/workflows/bandit.yml#L28
If a project runs Bandit scan checks for commits:
  - advice: >
      It would be good to have SecGo as analysis step for all commits, yes initiating it with PR would be great.
    links:
      - name: GitHub workflow action config to run Bandit code scanning job on every PR of a project.
        url: https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#example-using-a-list-of-events
      - name: An eample to trigger Bandit scan check on every pull-request.
        url: https://github.com/TNLinc/CV/blob/main/.github/workflows/bandit.yml#L3
If a project runs GoSec scans with rules:
  - advice: >
      It would be good to run GoSec scans with default rules.
    links:
      - name: GitHub workflow action job config to run GoSec code scanning for a repository.
        url: https://github.com/securego/gosec#github-action
      - name: Configuration to run the GoSec scan in default mode.
        url: https://github.com/securego/gosec#usage
If a project runs GoSec scan checks for commits:
  - advice: >
      You can open a pull request to trigger GoSec scans job in the project using GitHub action workflow for every pull-request.
    links:
      - name: GitHub workflow action config to run GoSec code scanning job on every PR of a project.
        url: https://github.com/securego/gosec#github-action
If an open-source project uses AddressSanitizer:
  - advice: >
      You can open a pull request to enable AddressSanitizer for the project.
    links:
      - name: About AddressSanitizer
        url: https://github.com/google/sanitizers/wiki/AddressSanitizer
If an open-source project uses MemorySanitizer:
  - advice: >
      You can open a pull request to enable MemorySanitizer for the project.
    links:
      - name: About MemorySanitizer
        url: https://github.com/google/sanitizers/wiki/MemorySanitizer
If an open-source project uses UndefinedBehaviorSanitizer:
  - advice: >
      You can open a pull request to enable UndefinedBehaviorSanitizer for the project.
    links:
      - name: About UndefinedBehaviorSanitizer
        url: https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html
If an open-source project is included to OSS-Fuzz project:
  - advice: >
      You can include the project to OSS-Fuzz. Then, the project is going to be regularly fuzzed.
    links:
      - name: The OSS-Fuzz project
        url: https://github.com/google/oss-fuzz
Version string:
  - advice: >
      Update the dependency version ${VERSION} to ${LATEST_VERSION}.
If a project uses Dependabot:
  - advice: >
      You can configure Dependabot by creating a configuration file.
    links:
      - name: Configuration options for dependency updates
        url: https://docs.github.com/en/github/administering-a-repository/configuration-options-for-dependency-updates
If a project uses Snyk:
  - advice: >
      You can create Snyk account and configure your project.
    links:
      - name: Getting started with snyk for open source
        url: https://docs.snyk.io/products/snyk-open-source/getting-started-snyk-open-source
How OWASP Dependency Check is used:
  - advice: >
      You can add OWASP Dependency Check to the project's build pipeline.
    links:
      - name: OWASP Dependnecy Check
        url: https://jeremylong.github.io/DependencyCheck/
      - name: How to use OWASP Dependency Check with Maven
        url: https://jeremylong.github.io/DependencyCheck/dependency-check-maven
      - name: How to use OWASP Dependnecy Check with Gradle
        url: https://github.com/dependency-check/dependency-check-gradle
A CVSS threshold for OWASP Dependency Check to fail the build:
  - advice: >
      You can set a CVSS threshold for vulnerabilities reported by OWASP Dependency Check.
    links:
      - name: OWASP Dependnecy Check
        url: https://jeremylong.github.io/DependencyCheck/
      - name: Configuring OWASP Dependency Check
        url: https://jeremylong.github.io/DependencyCheck/dependency-check-maven/configuration.html
If a project signs artifacts:
  - advice: >
      You can enable artifact signing in the project's build pipeline.
    links:
      - name: Apache Maven Jarsigner Plugin
        url: https://maven.apache.org/plugins/maven-jarsigner-plugin/
If a project uses nohttp tool:
  - advice: >
      You can enable NoHttp tool in the project's build pipeline.
    links:
      - name: NoHttp tool home page
        url: https://github.com/spring-io/nohttp
