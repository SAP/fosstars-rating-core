package com.sap.sgs.phosphor.fosstars.model.score.oss;

import static com.sap.sgs.phosphor.fosstars.model.feature.oss.OssFeatures.PROJECT_START_DATE;
import static com.sap.sgs.phosphor.fosstars.model.feature.oss.OssFeatures.VULNERABILITIES;
import static com.sap.sgs.phosphor.fosstars.model.other.Utils.findValue;

import com.sap.sgs.phosphor.fosstars.model.Score;
import com.sap.sgs.phosphor.fosstars.model.Value;
import com.sap.sgs.phosphor.fosstars.model.qa.ScoreVerification;
import com.sap.sgs.phosphor.fosstars.model.qa.TestVector;
import com.sap.sgs.phosphor.fosstars.model.score.FeatureBasedScore;
import com.sap.sgs.phosphor.fosstars.model.value.CVSS;
import com.sap.sgs.phosphor.fosstars.model.value.ScoreValue;
import com.sap.sgs.phosphor.fosstars.model.value.Vulnerabilities;
import com.sap.sgs.phosphor.fosstars.model.value.Vulnerability;
import java.io.IOException;
import java.io.InputStream;
import java.time.Duration;
import java.time.Instant;
import java.time.ZonedDateTime;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * The score shows how fast vulnerabilities are patched in an open-source project.
 * The score is based on the following features:
 * <ul>
 *   <li>Information about vulnerabilities in the project.</li>
 *   <li>When the project started.</li>
 * </ul>
 */
public class VulnerabilityLifetimeScore extends FeatureBasedScore {

  /**
   * If unknown, the score assumes that the project started 10 years ago.
   */
  private static final Date DEFAULT_PROJECT_START_DATE
      = Date.from(ZonedDateTime.now().minusYears(10).toInstant());

  /**
   * Maximum lifetime factor.
   */
  private static final double MAX_LIFETIME_FACTOR = 0.3;

  /**
   * Maps a vulnerability lifetime (in days) to a factor for CVSS score of the vulnerability.
   */
  private static final Map<Duration, Double> LIFETIME_TO_FACTOR = new LinkedHashMap<>();

  static {
    LIFETIME_TO_FACTOR.put(Duration.ofDays(10),  0.01);
    LIFETIME_TO_FACTOR.put(Duration.ofDays(35),  0.05);
    LIFETIME_TO_FACTOR.put(Duration.ofDays(100), 0.1);
    LIFETIME_TO_FACTOR.put(Duration.ofDays(200), 0.15);
    LIFETIME_TO_FACTOR.put(Duration.ofDays(370), 0.2);
  }

  /**
   * Returns a factor for a specified lifetime.
   *
   * @param lifetime The lifetime in days.
   * @return The factor.
   */
  static double factorOf(Duration lifetime) {
    for (Map.Entry<Duration, Double> entry : LIFETIME_TO_FACTOR.entrySet()) {
      if (lifetime.compareTo(entry.getKey()) <= 0) {
        return entry.getValue();
      }
    }
    return MAX_LIFETIME_FACTOR;
  }

  /**
   * Initializes a new score.
   */
  VulnerabilityLifetimeScore() {
    super("How fast vulnerabilities are patched", VULNERABILITIES, PROJECT_START_DATE);
  }

  @Override
  public ScoreValue calculate(Value... values) {
    Value<Vulnerabilities> vulnerabilities = findValue(values, VULNERABILITIES,
        "Hey! Give me info about vulnerabilities!");
    Value<Date> projectStartDate = findValue(values, PROJECT_START_DATE,
        "Hey! Tell me when the project started!");

    if (vulnerabilities.isUnknown()) {
      return scoreValue(Score.MIN, vulnerabilities, projectStartDate);
    }

    Date now = new Date(System.currentTimeMillis());
    Date estimatedIntroducedDate = projectStartDate.isUnknown()
        ? DEFAULT_PROJECT_START_DATE : projectStartDate.get();

    double penalty = 0.0;
    for (Vulnerability entry : vulnerabilities.get().entries()) {
      Instant introduced = entry.introduced().orElse(estimatedIntroducedDate).toInstant();
      Instant fixed = entry.fixed().orElse(now).toInstant();

      if (fixed.isBefore(introduced)) {
        throw new IllegalArgumentException("Looks like the vulnerability had been fixed "
            + "even before it was introduced! How is that possible?");
      }

      CVSS cvss = entry.cvss();
      double cvssValue = cvss.isUnknown() ? CVSS.MAX : cvss.value();

      penalty += cvssValue * factorOf(Duration.between(introduced, fixed));
    }

    return scoreValue(Score.MAX - penalty, vulnerabilities, projectStartDate);
  }

  /**
   * This class implements a verification procedure for {@link VulnerabilityLifetimeScore}.
   * The class loads test vectors,
   * and provides methods to verify a {@link VulnerabilityLifetimeScore}
   * against those test vectors.
   */
  public static class Verification extends ScoreVerification {

    /**
     * A name of a resource which contains the test vectors.
     */
    private static final String TEST_VECTORS_YAML = "VulnerabilityLifetimeScoreTestVectors.yml";

    /**
     * Initializes a {@link Verification} for a {@link VulnerabilityLifetimeScore}.
     *
     * @param score A score to be verified.
     * @param vectors A list of test vectors.
     */
    public Verification(VulnerabilityLifetimeScore score, List<TestVector> vectors) {
      super(score, vectors);
    }

    /**
     * Creates an instance of {@link Verification} for a specified score. The method loads test
     * vectors from a default resource.
     *
     * @param score The score to be verified.
     * @return An instance of {@link VulnerabilityLifetimeScore}.
     */
    static Verification createFor(VulnerabilityLifetimeScore score) throws IOException {
      try (InputStream is = Verification.class.getResourceAsStream(TEST_VECTORS_YAML)) {
        return new Verification(score, loadTestVectorsFromYaml(is));
      }
    }
  }

}
