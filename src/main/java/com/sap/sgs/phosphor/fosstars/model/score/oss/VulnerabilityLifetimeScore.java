package com.sap.sgs.phosphor.fosstars.model.score.oss;

import static com.sap.sgs.phosphor.fosstars.model.feature.oss.OssFeatures.FIRST_COMMIT_DATE;
import static com.sap.sgs.phosphor.fosstars.model.feature.oss.OssFeatures.PROJECT_START_DATE;
import static com.sap.sgs.phosphor.fosstars.model.feature.oss.OssFeatures.VULNERABILITIES;
import static com.sap.sgs.phosphor.fosstars.model.other.Utils.findValue;

import com.sap.sgs.phosphor.fosstars.model.Confidence;
import com.sap.sgs.phosphor.fosstars.model.Score;
import com.sap.sgs.phosphor.fosstars.model.ScoreValue;
import com.sap.sgs.phosphor.fosstars.model.Value;
import com.sap.sgs.phosphor.fosstars.model.qa.ScoreVerification;
import com.sap.sgs.phosphor.fosstars.model.qa.TestVector;
import com.sap.sgs.phosphor.fosstars.model.score.FeatureBasedScore;
import com.sap.sgs.phosphor.fosstars.model.value.CVSS;
import com.sap.sgs.phosphor.fosstars.model.value.Vulnerabilities;
import com.sap.sgs.phosphor.fosstars.model.value.Vulnerability;
import java.io.IOException;
import java.io.InputStream;
import java.util.Date;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * The score shows how fast vulnerabilities are patched in an open-source project.
 * The score is based on the following features:
 * <ul>
 *   <li>Information about vulnerabilities in the project.</li>
 *   <li>When the project started.</li>
 *   <li>When the first commit was done.</li>
 * </ul>
 */
public class VulnerabilityLifetimeScore extends FeatureBasedScore {

  private static final Logger LOGGER = LogManager.getLogger(VulnerabilityLifetimeScore.class);

  /**
   * The default CVSS score for a vulnerability if no score specified.
   */
  private static final double DEFAULT_CVSS = 10.0;

  private static final double MAX_CVSS = 10.0;

  private static final long DEFAULT_PROJECT_START_DATE
      = System.currentTimeMillis() - 10 * 365 * 24 * 60 * 60 * 1000L;

  VulnerabilityLifetimeScore() {
    super("How fast vulnerabilities are patched",
        VULNERABILITIES, PROJECT_START_DATE, FIRST_COMMIT_DATE);
  }

  @Override
  public ScoreValue calculate(Value... values) {
    Value<Vulnerabilities> vulnerabilities = findValue(values, VULNERABILITIES,
        "Hey! Give me info about vulnerabilities!");
    Value<Date> projectStartDate = findValue(values, PROJECT_START_DATE,
        "Hey! Tell me when the project started!");
    Value<Date> firstCommitDate = findValue(values, FIRST_COMMIT_DATE,
        "Hey! Tell me when the first commit was done!");

    if (vulnerabilities.isUnknown()) {
      return new ScoreValue(this, Score.MIN, Confidence.MIN);
    }

    long nowInMillis = System.currentTimeMillis();
    long nowInSeconds = nowInMillis / 1000;
    Date now = new Date(nowInMillis);
    Date estimatedIntroducedDate = estimatedIntroducedDate(projectStartDate, firstCommitDate);
    Date estimatedProjectStartDate = estimatedProjectStartDate(projectStartDate, firstCommitDate);
    long projectLifetimeInSeconds
        = nowInSeconds - estimatedProjectStartDate.toInstant().getEpochSecond();

    double penalty = 0.0;
    for (Vulnerability entry : vulnerabilities.get().entries()) {
      long introduced = entry.introduced().orElse(estimatedIntroducedDate)
          .toInstant().getEpochSecond();
      long fixed = entry.fixed().orElse(now).toInstant().getEpochSecond();
      if (fixed < introduced) {
        LOGGER.warn("Looks like the vulnerability had been fixed "
            + "before it was introduced! How is it possible?");
        continue;
      }

      CVSS cvss = entry.cvss();
      double cvssValue = cvss.isUnknown() ? DEFAULT_CVSS : cvss.value();

      double vulnerabilityLifetimeFactor
          = (double) (fixed - introduced) / (double) projectLifetimeInSeconds;
      double cvssFactor = cvssValue / MAX_CVSS;

      penalty += vulnerabilityLifetimeFactor * cvssFactor;
    }

    return new ScoreValue(
        this,
        Score.adjust(Score.MAX - penalty),
        Confidence.make(vulnerabilities, projectStartDate, firstCommitDate));
  }

  private static Date estimatedIntroducedDate(
      Value<Date> projectStartDate, Value<Date> firstCommitDate) {

    if (!projectStartDate.isUnknown()) {
      return projectStartDate.get();
    }
    if (!firstCommitDate.isUnknown()) {
      return firstCommitDate.get();
    }
    return new Date(DEFAULT_PROJECT_START_DATE);
  }

  private static Date estimatedProjectStartDate(
      Value<Date> projectStartDate, Value<Date> firstCommitDate) {

    if (!projectStartDate.isUnknown()) {
      return projectStartDate.get();
    }
    if (!firstCommitDate.isUnknown()) {
      return firstCommitDate.get();
    }
    return new Date(DEFAULT_PROJECT_START_DATE);
  }

  /**
   * This class implements a verification procedure for {@link VulnerabilityLifetimeScore}.
   * The class loads test vectors,
   * and provides methods to verify a {@link VulnerabilityLifetimeScore}
   * against those test vectors.
   */
  public static class Verification extends ScoreVerification {

    /**
     * A name of a resource which contains the test vectors.
     */
    private static final String TEST_VECTORS_CSV = "VulnerabilityLifetimeScoreTestVectors.csv";

    /**
     * Initializes a {@link Verification} for a {@link VulnerabilityLifetimeScore}.
     *
     * @param score A score to be verified.
     * @param vectors A list of test vectors.
     */
    public Verification(VulnerabilityLifetimeScore score, List<TestVector> vectors) {
      super(score, vectors);
    }

    /**
     * Creates an instance of {@link Verification} for a specified score. The method loads test
     * vectors from a default resource.
     *
     * @param score The score to be verified.
     * @return An instance of {@link VulnerabilityLifetimeScore}.
     */
    static Verification createFor(VulnerabilityLifetimeScore score) throws IOException {
      try (InputStream is = VulnerabilityLifetimeScore.Verification.class
          .getResourceAsStream(TEST_VECTORS_CSV)) {

        return new Verification(score, loadTestVectorsFromCsvResource(score.features(), is));
      }
    }
  }

}
