package com.sap.sgs.phosphor.fosstars.model.score.oss;

import static com.sap.sgs.phosphor.fosstars.model.feature.oss.OssFeatures.VULNERABILITIES;
import static com.sap.sgs.phosphor.fosstars.model.other.Utils.findValue;

import com.sap.sgs.phosphor.fosstars.model.Score;
import com.sap.sgs.phosphor.fosstars.model.Value;
import com.sap.sgs.phosphor.fosstars.model.qa.ScoreVerification;
import com.sap.sgs.phosphor.fosstars.model.qa.TestVectors;
import com.sap.sgs.phosphor.fosstars.model.score.FeatureBasedScore;
import com.sap.sgs.phosphor.fosstars.model.value.CVSS;
import com.sap.sgs.phosphor.fosstars.model.value.ScoreValue;
import com.sap.sgs.phosphor.fosstars.model.value.Vulnerabilities;
import com.sap.sgs.phosphor.fosstars.model.value.Vulnerability;
import java.io.IOException;
import java.io.InputStream;
import java.time.Duration;
import java.time.Instant;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * <p>The score shows how fast vulnerabilities are patched in an open-source project.
 * The score is based on information about vulnerabilities in the project.</p>
 */
public class VulnerabilityLifetimeScore extends FeatureBasedScore {

  /**
   * Maximum lifetime factor.
   */
  private static final double MAX_LIFETIME_FACTOR = 0.3;

  /**
   * Maps a vulnerability lifetime (in days) to a factor for CVSS score of the vulnerability.
   */
  private static final Map<Duration, Double> LIFETIME_TO_FACTOR = new LinkedHashMap<>();

  static {
    LIFETIME_TO_FACTOR.put(Duration.ofDays(10),  0.01);
    LIFETIME_TO_FACTOR.put(Duration.ofDays(35),  0.05);
    LIFETIME_TO_FACTOR.put(Duration.ofDays(100), 0.1);
    LIFETIME_TO_FACTOR.put(Duration.ofDays(200), 0.15);
    LIFETIME_TO_FACTOR.put(Duration.ofDays(370), 0.2);
  }

  /**
   * Returns a factor for a specified lifetime.
   *
   * @param lifetime The lifetime in days.
   * @return The factor.
   */
  static double factorOf(Duration lifetime) {
    for (Map.Entry<Duration, Double> entry : LIFETIME_TO_FACTOR.entrySet()) {
      if (lifetime.compareTo(entry.getKey()) <= 0) {
        return entry.getValue();
      }
    }
    return MAX_LIFETIME_FACTOR;
  }

  /**
   * Initializes a new score.
   */
  VulnerabilityLifetimeScore() {
    super("How fast vulnerabilities are patched", VULNERABILITIES);
  }

  @Override
  public ScoreValue calculate(Value... values) {
    Value<Vulnerabilities> vulnerabilities = findValue(values, VULNERABILITIES,
        "Hey! Give me info about vulnerabilities!");

    if (vulnerabilities.isUnknown()) {
      return scoreValue(Score.MIN, vulnerabilities);
    }

    if (vulnerabilities.get().isEmpty()) {
      return scoreValue(Score.MAX, vulnerabilities).explain("No vulnerabilities found.");
    }

    double penalty = 0.0;
    boolean found = false;
    for (Vulnerability entry : vulnerabilities.get().entries()) {
      if (!entry.introduced().isPresent() || !entry.fixed().isPresent()) {
        continue;
      }

      Instant introduced = entry.introduced().get().toInstant();
      Instant fixed = entry.fixed().get().toInstant();

      if (fixed.isBefore(introduced)) {
        logger.warn("Looks like the vulnerability {} had been fixed ({}) "
                + "even before it was introduced ({})! How is that possible? Let's skip it.",
            entry.id(), fixed, introduced);
        continue;
      }

      CVSS cvss = entry.cvss();
      double cvssValue = cvss.isUnknown() ? CVSS.MAX : cvss.value();

      penalty += cvssValue * factorOf(Duration.between(introduced, fixed));
      found = true;
    }

    if (!found) {
      return scoreValue(Score.MIN, vulnerabilities)
          .makeNotApplicable()
          .explain("The score could not be applied "
              + "because no vulnerabilities with introduced/fixed dates were found.");
    }

    return scoreValue(Score.MAX - penalty, vulnerabilities);
  }

  /**
   * This class implements a verification procedure for {@link VulnerabilityLifetimeScore}.
   * The class loads test vectors,
   * and provides methods to verify a {@link VulnerabilityLifetimeScore}
   * against those test vectors.
   */
  public static class Verification extends ScoreVerification {

    /**
     * A name of a resource which contains the test vectors.
     */
    private static final String TEST_VECTORS_YAML = "VulnerabilityLifetimeScoreTestVectors.yml";

    /**
     * Initializes a {@link Verification} for a {@link VulnerabilityLifetimeScore}.
     *
     * @param score A score to be verified.
     * @param vectors A list of test vectors.
     */
    public Verification(VulnerabilityLifetimeScore score, TestVectors vectors) {
      super(score, vectors);
    }

    /**
     * Creates an instance of {@link Verification} for a specified score. The method loads test
     * vectors from a default resource.
     *
     * @param score The score to be verified.
     * @return An instance of {@link VulnerabilityLifetimeScore}.
     */
    static Verification createFor(VulnerabilityLifetimeScore score) throws IOException {
      try (InputStream is = Verification.class.getResourceAsStream(TEST_VECTORS_YAML)) {
        return new Verification(score, TestVectors.loadFromYaml(is));
      }
    }
  }

}
