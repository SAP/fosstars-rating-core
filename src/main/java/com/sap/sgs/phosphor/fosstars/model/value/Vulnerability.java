package com.sap.sgs.phosphor.fosstars.model.value;

import static com.sap.sgs.phosphor.fosstars.model.other.Utils.date;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.sap.sgs.phosphor.fosstars.nvd.data.LangString;
import com.sap.sgs.phosphor.fosstars.nvd.data.NvdEntry;
import com.sap.sgs.phosphor.fosstars.nvd.data.ReferenceLink;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * The class holds information about a vulnerability.
 */
public class Vulnerability {

  /**
   * A enum of resolution statuses of a vulnerability.
   */
  public enum Resolution {
    PATCHED, UNPATCHED, UNKNOWN
  }

  /**
   * This means that a vulnerability has no description.
   */
  public static final String NO_DESCRIPTION = null;

  /**
   * This means that a vulnerability has not references.
   */
  public static final List<Reference> NO_REFERENCES = Collections.emptyList();

  /**
   * This means that it's unknown when a vulnerability was introduced.
   */
  public static final Date UNKNOWN_INTRODUCED_DATE = null;

  /**
   * This means that it's unknown when a vulnerability was fixed.
   */
  public static final Date UNKNOWN_FIXED_DATE = null;

  /**
   * An identifier of the vulnerability. It may be a URL.
   */
  private final String id;

  /**
   * A description of the vulnerability.
   */
  private final String description;

  /**
   * A CVSS score for the vulnerability.
   */
  private final CVSS cvss;

  /**
   * A list of references which provide additional information about the vulnerability.
   */
  private final List<Reference> references;

  /**
   * A resolution status for the vulnerability.
   */
  private final Resolution resolution;

  /**
   * A date when the vulnerability was introduced.
   */
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd", locale = "us_US")
  private final Date introduced;

  /**
   * A date when the vulnerability was fixed.
   */
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd", locale = "us_US")
  private final Date fixed;

  /**
   * Initializes a vulnerability just with its identifier.
   *
   * @param id The identifier of the vulnerability. It may be a URL.
   */
  public Vulnerability(String id) {
    this(id, NO_DESCRIPTION, CVSS.UNKNOWN, NO_REFERENCES, Resolution.UNKNOWN,
        UNKNOWN_INTRODUCED_DATE, UNKNOWN_FIXED_DATE);
  }

  /**
   * Initializes a vulnerability.
   *
   * @param id An identifier of the vulnerability. It may be a URL.
   * @param description A description of the vulnerability.
   * @param cvss A CVSS score for the vulnerability.
   * @param references A list of references
   *                   which provide additional information about the vulnerability.
   * @param resolution A resolution status for the vulnerability.
   */
  public Vulnerability(String id, String description, CVSS cvss,
      List<Reference> references, Resolution resolution) {

    this(id, description, cvss, references, resolution,
        UNKNOWN_INTRODUCED_DATE, UNKNOWN_FIXED_DATE);
  }

  /**
   * Initializes a vulnerability.
   *
   * @param id An identifier of the vulnerability. It may be a URL.
   * @param description A description of the vulnerability.
   * @param cvss A CVSS score for the vulnerability.
   * @param references A list of references
   *                   which provide additional information about the vulnerability.
   * @param resolution A resolution status for the vulnerability.
   * @param introduced A date when the vulnerability was introduced.
   * @param fixed A date when the vulnerability was fixed.
   */
  public Vulnerability(
      @JsonProperty("id") String id,
      @JsonProperty("description") String description,
      @JsonProperty("cvss") CVSS cvss,
      @JsonProperty("references") List<Reference> references,
      @JsonProperty("resolution") Resolution resolution,
      @JsonProperty("introduced") Date introduced,
      @JsonProperty("fixed") Date fixed) {

    Objects.requireNonNull(id, "Hey! An identifier can't be null!");
    Objects.requireNonNull(cvss, "Hey! CVSS can't be null!");
    Objects.requireNonNull(references, "Hey! References can't be null!");
    Objects.requireNonNull(resolution, "Hey! Resolution can't be null");

    if (resolution != Resolution.PATCHED && fixed != null) {
      throw new IllegalArgumentException(
          "Hey! You know when the vulnerability was fixed, but saying that it was not patched!");
    }

    if (fixed != null && introduced != null && fixed.before(introduced)) {
      throw new IllegalArgumentException(String.format(
          "Hey! A vulnerability '%s' can't be fixed before it was introduced!", id));
    }

    this.id = id;
    this.description = description;
    this.cvss = cvss;
    this.references = references;
    this.resolution = resolution;
    this.introduced = introduced;
    this.fixed = fixed;
  }

  /**
   * Returns the identifier of the vulnerability. It may be a URL.
   */
  @JsonGetter("id")
  public String id() {
    return id;
  }

  /**
   * Returns the CVSS score for the vulnerability.
   */
  @JsonGetter("cvss")
  public CVSS cvss() {
    return cvss;
  }

  /**
   * Returns the description of the vulnerability.
   */
  public Optional<String> description() {
    return Optional.ofNullable(description);
  }

  /**
   * Returns the list of references which provide additional information about the vulnerability.
   */
  @JsonGetter("references")
  public List<Reference> references() {
    return Collections.unmodifiableList(references);
  }

  /**
   * Return the resolution status for the vulnerability.
   */
  @JsonGetter("resolution")
  public Resolution resolution() {
    return resolution;
  }

  /**
   * Return the date when the vulnerability was introduced, or null if the date is unknown.
   */
  public Optional<Date> introduced() {
    return Optional.ofNullable(introduced);
  }

  /**
   * Returns the date when the vulnerability was fixed, or null if the date is unknown.
   */
  public Optional<Date> fixed() {
    return Optional.ofNullable(fixed);
  }

  /**
   * equals() and hashCode() methods consider only the identifier.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o instanceof Vulnerability == false) {
      return false;
    }
    Vulnerability that = (Vulnerability) o;
    return Objects.equals(id, that.id);
  }

  /**
   * equals() and hashCode() methods consider only the identifier.
   */
  @Override
  public int hashCode() {
    return Objects.hashCode(id);
  }

  /**
   * Returns a date when the vulnerability was introduced.
   * This method is here to make Jackson happy.
   */
  private Date getIntroduced() {
    return introduced;
  }

  /**
   * Returns a date when the vulnerability was fixed.
   * This method is here to make Jackson happy.
   */
  private Date getFixed() {
    return fixed;
  }

  /**
   * Returns a description of the vulnerability.
   * This method is here to make Jackson happy.
   */
  private String getDescription() {
    return description;
  }

  /**
   * The builder builds instances of {@link Vulnerability}.
   */
  public static class Builder {

    /**
     * A logger.
     */
    private static final Logger LOGGER = LogManager.getLogger(Builder.class);

    /**
     * An identifier of the vulnerability. It may be a URL.
     */
    private String id;

    /**
     * A description of the vulnerability.
     */
    private String description;

    /**
     * A CVSS score for the vulnerability.
     */
    private CVSS cvss;

    /**
     * A list of references which provide additional information about the vulnerability.
     */
    private List<Reference> references;

    /**
     * A resolution status for the vulnerability.
     */
    private Resolution resolution = Resolution.UNKNOWN;

    /**
     * A date when the vulnerability was introduced.
     */
    private Date introduced;

    /**
     * A date when the vulnerability was fixed.
     */
    private Date fixed;

    /**
     * Converts an {@link NvdEntry} to a {@link Vulnerability}.
     *
     * @param entry The {@link NvdEntry} to be converted.
     * @return An instance of {@link Vulnerability}.
     */
    public static Builder from(NvdEntry entry) {
      Builder builder = new Builder();
      builder.id = entry.getCve().getCveDataMeta().getId();

      builder.description = entry.getCve().getDescription().getDescriptionData().stream()
          .map(LangString::getValue).collect(Collectors.joining("\n\n"));

      // TODO: use CVSSv3 if it's available
      builder.cvss = CVSS.v2(entry.getImpact().getBaseMetricV2().getCVSSv2().getBaseScore());

      builder.references = new ArrayList<>();

      for (ReferenceLink r : entry.getCve().getReferences().getReferenceData()) {
        try {
          builder.references.add(new Reference(r.getName(), new URL(r.getUrl())));
        } catch (MalformedURLException e) {
          LOGGER.warn("Could not parse a URL from a reference in NVD", e);
        }
      }

      // we make an assumption here that the vulnerability is fixed
      // since most of vulnerabilities in the NVD are fixed
      builder.resolution = Resolution.PATCHED;

      // approximate the date when the vulnerability was fixed by just the published date
      builder.fixed = date(entry.getPublishedDate());

      return builder;
    }

    /**
     * Set a resolution status.
     *
     * @param resolution The resolution status.
     * @return The same builder.
     */
    public Builder set(Resolution resolution) {
      this.resolution = Objects.requireNonNull(resolution, "Null is not a resolution!");
      return this;
    }

    /**
     * Set that it's not known when the vulnerability was fixed.
     *
     * @return The same builder.
     */
    public Builder noFixDate() {
      fixed = UNKNOWN_FIXED_DATE;
      return this;
    }

    /**
     * Create an instance of {@link Vulnerability}.
     */
    public Vulnerability make() {
      return new Vulnerability(id, description, cvss, references, resolution, introduced, fixed);
    }
  }
}
