package com.sap.sgs.phosphor.fosstars.model.value;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * The class holds information about a vulnerability.
 */
public class Vulnerability {

  public enum Resolution {
    PATCHED, UNPATCHED, UNKNOWN
  }

  public static final String NO_DESCRIPTION = null;
  public static final List<Reference> NO_REFERENCES = Collections.emptyList();
  public static final Date UNKNOWN_INTRODUCED_DATE = null;
  public static final Date UNKNOWN_FIXED_DATE = null;

  /**
   * An identifier of the vulnerability. It may be a URL.
   */
  private final String id;

  /**
   * A description of the vulnerability.
   */
  private final String description;

  /**
   * A CVSS score for the vulnerability.
   */
  private final CVSS cvss;

  /**
   * A list of references which provide additional information about the vulnerability.
   */
  private final List<Reference> references;

  /**
   * A resolution status for the vulnerability.
   */
  private final Resolution resolution;

  /**
   * A date when the vulnerability was introduced.
   */
  private final Date introduced;

  /**
   * A date when the vulnerability was fixed.
   */
  private final Date fixed;

  /**
   * Initializes a vulnerability just with its identifier.
   *
   * @param id The identifier of the vulnerability. It may be a URL.
   */
  public Vulnerability(String id) {
    this(id, NO_DESCRIPTION, CVSS.UNKNOWN, NO_REFERENCES, Resolution.UNKNOWN,
        UNKNOWN_INTRODUCED_DATE, UNKNOWN_FIXED_DATE);
  }

  /**
   * Initializes a vulnerability.
   *
   * @param id An identifier of the vulnerability. It may be a URL.
   * @param description A description of the vulnerability.
   * @param cvss A CVSS score for the vulnerability.
   * @param references A list of references
   *                   which provide additional information about the vulnerability.
   * @param resolution A resolution status for the vulnerability.
   */
  public Vulnerability(String id, String description, CVSS cvss,
      List<Reference> references, Resolution resolution) {

    this(id, description, cvss, references, resolution,
        UNKNOWN_INTRODUCED_DATE, UNKNOWN_FIXED_DATE);
  }

  /**
   * Initializes a vulnerability.
   *
   * @param id An identifier of the vulnerability. It may be a URL.
   * @param description A description of the vulnerability.
   * @param cvss A CVSS score for the vulnerability.
   * @param references A list of references
   *                   which provide additional information about the vulnerability.
   * @param resolution A resolution status for the vulnerability.
   * @param introduced A date when the vulnerability was introduced.
   * @param fixed A date when the vulnerability was fixed.
   */
  public Vulnerability(
      @JsonProperty("id") String id,
      @JsonProperty("description") String description,
      @JsonProperty("cvss") CVSS cvss,
      @JsonProperty("references") List<Reference> references,
      @JsonProperty("resolution") Resolution resolution,
      @JsonProperty("introduced") Date introduced,
      @JsonProperty("fixed") Date fixed) {

    Objects.requireNonNull(id, "Hey! An identifier can't be null!");
    Objects.requireNonNull(cvss, "Hey! CVSS can't be null!");
    Objects.requireNonNull(references, "Hey! References can't be null!");
    Objects.requireNonNull(resolution, "Hey! Resolution can't be null");

    if (resolution != Resolution.PATCHED && fixed != null) {
      throw new IllegalArgumentException(
          "Hey! You know when the vulnerability was fixed, but saying that it was not patched!");
    }

    if (fixed != null && introduced != null && fixed.before(introduced)) {
      throw new IllegalArgumentException(String.format(
          "Hey! A vulnerability '%s' can't be fixed before it was introduced!", id));
    }

    this.id = id;
    this.description = description;
    this.cvss = cvss;
    this.references = references;
    this.resolution = resolution;
    this.introduced = introduced;
    this.fixed = fixed;
  }

  /**
   * Returns the identifier of the vulnerability. It may be a URL.
   */
  @JsonGetter("id")
  public String id() {
    return id;
  }

  /**
   * Returns the CVSS score for the vulnerability.
   */
  @JsonGetter("cvss")
  public CVSS cvss() {
    return cvss;
  }

  /**
   * Returns the description of the vulnerability.
   */
  public Optional<String> description() {
    return Optional.ofNullable(description);
  }

  /**
   * Returns the list of references which provide additional information about the vulnerability.
   */
  @JsonGetter("references")
  public List<Reference> references() {
    return Collections.unmodifiableList(references);
  }

  /**
   * Return the resolution status for the vulnerability.
   */
  @JsonGetter("resolution")
  public Resolution resolution() {
    return resolution;
  }

  /**
   * Return the date when the vulnerability was introduced, or null if the date is unknown.
   */
  public Optional<Date> introduced() {
    return Optional.ofNullable(introduced);
  }

  /**
   * Returns the date when the vulnerability was fixed, or null if the date is unknown.
   */
  public Optional<Date> fixed() {
    return Optional.ofNullable(fixed);
  }

  /**
   * equals() and hashCode() methods consider only the identifier.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o instanceof Vulnerability == false) {
      return false;
    }
    Vulnerability that = (Vulnerability) o;
    return Objects.equals(id, that.id);
  }

  /**
   * equals() and hashCode() methods consider only the identifier.
   */
  @Override
  public int hashCode() {
    return Objects.hashCode(id);
  }

  // the getters below are necessary to making Jackson happy

  private Date getIntroduced() {
    return introduced;
  }

  private Date getFixed() {
    return fixed;
  }

  private String getDescription() {
    return description;
  }
}
