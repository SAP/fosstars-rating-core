package com.sap.oss.phosphor.fosstars.model.value;

import static com.sap.oss.phosphor.fosstars.model.other.Utils.date;
import static java.util.Optional.ofNullable;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.sap.oss.phosphor.fosstars.nvd.data.CVSSv2;
import com.sap.oss.phosphor.fosstars.nvd.data.CVSSv3;
import com.sap.oss.phosphor.fosstars.nvd.data.CpeMatch;
import com.sap.oss.phosphor.fosstars.nvd.data.Impact;
import com.sap.oss.phosphor.fosstars.nvd.data.LangString;
import com.sap.oss.phosphor.fosstars.nvd.data.Node;
import com.sap.oss.phosphor.fosstars.nvd.data.NvdEntry;
import com.sap.oss.phosphor.fosstars.nvd.data.ReferenceLink;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * The class holds information about a vulnerability.
 */
public class Vulnerability {

  /**
   * A enum of resolution statuses of a vulnerability.
   */
  public enum Resolution {
    PATCHED, UNPATCHED, UNKNOWN
  }

  /**
   * This means that a vulnerability has no description.
   */
  public static final String NO_DESCRIPTION = null;

  /**
   * This means that a vulnerability has not references.
   */
  public static final List<Reference> NO_REFERENCES = Collections.emptyList();

  /**
   * This means that it's unknown when a vulnerability was introduced.
   */
  public static final Date UNKNOWN_INTRODUCED_DATE = null;

  /**
   * This means that it's unknown when a vulnerability was fixed.
   */
  public static final Date UNKNOWN_FIXED_DATE = null;

  /**
   * This means that it's unknown when a vulnerability was published.
   */
  public static final Date UNKNOWN_PUBLISHED_DATE = null;

  /**
   * An identifier of the vulnerability. It may be a URL.
   */
  private final String id;

  /**
   * A description of the vulnerability.
   */
  private final String description;

  /**
   * A CVSS score for the vulnerability.
   */
  @JsonProperty("cvss")
  private final CVSS cvss;

  /**
   * A list of references which provide additional information about the vulnerability.
   */
  private final List<Reference> references;

  /**
   * A resolution status for the vulnerability.
   */
  private final Resolution resolution;

  /**
   * A date when the vulnerability was introduced.
   */
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd", locale = "us_US")
  private final Date introduced;

  /**
   * A date when the vulnerability was fixed.
   */
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd", locale = "us_US")
  private final Date fixed;

  /**
   * A date when the vulnerability was published.
   */
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd", locale = "us_US")
  private final Date published;

  /**
   * List of vulnerable version ranges.
   */
  private final List<VersionRange> vulnerableVersions;

  /**
   * Initializes a vulnerability.
   * @param id An identifier of the vulnerability. It may be a URL.
   * @param description A description of the vulnerability.
   * @param cvss A CVSS score for the vulnerability.
   * @param references A list of references
   *                   which provide additional information about the vulnerability.
   * @param resolution A resolution status for the vulnerability.
   * @param introduced A date when the vulnerability was introduced.
   * @param fixed A date when the vulnerability was fixed.
   * @param published A date when the vulnerability was published.
   * @param vulnerableVersions Vulnerable version ranges.
   */
  Vulnerability(
      @JsonProperty("id") String id,
      @JsonProperty("description") String description,
      @JsonProperty("cvss") CVSS cvss,
      @JsonProperty("references") List<Reference> references,
      @JsonProperty("resolution") Resolution resolution,
      @JsonProperty("introduced") Date introduced,
      @JsonProperty("fixed") Date fixed,
      @JsonProperty("published") Date published,
      @JsonProperty("vulnerableVersions") List<VersionRange> vulnerableVersions) {

    Objects.requireNonNull(id, "Hey! An identifier can't be null!");
    Objects.requireNonNull(references, "Hey! References can't be null!");
    Objects.requireNonNull(resolution, "Hey! Resolution can't be null");
    Objects.requireNonNull(resolution, "Hey! Vulnerable versions can't be null");

    if (resolution != Resolution.PATCHED && fixed != null) {
      throw new IllegalArgumentException(
          "Hey! You know when the vulnerability was fixed, but saying that it was not patched!");
    }

    if (fixed != null && introduced != null && fixed.before(introduced)) {
      throw new IllegalArgumentException(String.format(
          "Hey! A vulnerability '%s' can't be fixed before it was introduced!", id));
    }

    if (published != null && introduced != null && published.before(introduced)) {
      throw new IllegalArgumentException(String.format(
          "Hey! A vulnerability '%s' can't be published before it was introduced!", id));
    }

    this.id = id;
    this.description = description;
    this.cvss = cvss;
    this.references = references;
    this.resolution = resolution;
    this.introduced = introduced;
    this.fixed = fixed;
    this.published = published;
    this.vulnerableVersions = vulnerableVersions;
  }

  /**
   * Get the vulnerability identifier.
   *
   * @return The identifier of the vulnerability. It may be a URL.
   */
  @JsonGetter("id")
  public String id() {
    return id;
  }

  /**
   * Get the CVSS score.
   *
   * @return The CVSS score for the vulnerability if available.
   */
  public Optional<CVSS> cvss() {
    return ofNullable(cvss);
  }

  /**
   * Get the description.
   *
   * @return The description of the vulnerability.
   */
  public Optional<String> description() {
    return ofNullable(description);
  }

  /**
   * Get the references.
   *
   * @return The list of references which provide additional information about the vulnerability.
   */
  @JsonGetter("references")
  public List<Reference> references() {
    return Collections.unmodifiableList(references);
  }

  /**
   * Get the resolution status.
   *
   * @return The resolution status for the vulnerability.
   */
  @JsonGetter("resolution")
  public Resolution resolution() {
    return resolution;
  }

  /**
   * Get the date when the issue was introduced.
   *
   * @return The date when the vulnerability was introduced, or null if the date is unknown.
   */
  public Optional<Date> introduced() {
    return ofNullable(introduced);
  }

  /**
   * Get the date when the issue was fixed.
   *
   * @return The date when the vulnerability was fixed, or null if the date is unknown.
   */
  public Optional<Date> fixed() {
    return ofNullable(fixed);
  }

  /**
   * Get the date when the issue was published.
   *
   * @return The date when the vulnerability was published, or null if the date is unknown.
   */
  public Optional<Date> published() {
    return ofNullable(published);
  }

  /**
   * List of vulnerable version ranges.
   *
   * @return list of vulnerable version ranges
   */
  @JsonGetter("vulnerableVersions")
  public List<VersionRange> vulnerableVersions() {
    return vulnerableVersions;
  }

  /**
   * equals() and hashCode() methods consider only the identifier.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o instanceof Vulnerability == false) {
      return false;
    }
    Vulnerability that = (Vulnerability) o;
    return Objects.equals(id, that.id);
  }

  /**
   * equals() and hashCode() methods consider only the identifier.
   */
  @Override
  public int hashCode() {
    return Objects.hashCode(id);
  }

  /**
   * This method is here to make Jackson happy.
   *
   * @return A date when the vulnerability was introduced.
   */
  private Date getIntroduced() {
    return introduced;
  }

  /**
   * This method is here to make Jackson happy.
   *
   * @return A date when the vulnerability was fixed.
   */
  private Date getFixed() {
    return fixed;
  }

  /**
   * This method is here to make Jackson happy.
   *
   * @return A description of the vulnerability.
   */
  private String getDescription() {
    return description;
  }

  /**
   * The builder builds instances of {@link Vulnerability}.
   */
  public static class Builder {

    /**
     * A logger.
     */
    private static final Logger LOGGER = LogManager.getLogger(Builder.class);

    /**
     * An identifier of the vulnerability. It may be a URL.
     */
    private String id;

    /**
     * A description of the vulnerability.
     */
    private String description = Vulnerability.NO_DESCRIPTION;

    /**
     * A CVSS score for the vulnerability.
     */
    private CVSS cvss;

    /**
     * A list of references which provide additional information about the vulnerability.
     */
    private List<Reference> references = NO_REFERENCES;

    /**
     * A resolution status for the vulnerability.
     */
    private Resolution resolution = Resolution.UNKNOWN;

    /**
     * A date when the vulnerability was introduced.
     */
    private Date introduced = UNKNOWN_INTRODUCED_DATE;

    /**
     * A date when the vulnerability was fixed.
     */
    private Date fixed = UNKNOWN_FIXED_DATE;

    /**
     * A date when the vulnerability was published.
     */
    private Date published = UNKNOWN_PUBLISHED_DATE;

    /**
     * List of vulnerable version ranges.
     */
    private List<VersionRange> vulnerableVersions = Collections.emptyList();

    /**
     * Creates a new builder.
     *
     * @param id A vulnerability identifier.
     * @return A new builder.
     */
    public static Builder newVulnerability(String id) {
      Objects.requireNonNull(id, "Oh no! Vulnerability identifier is null!");

      Builder builder = new Builder();
      builder.id = id;
      return builder;
    }

    /**
     * Converts an {@link NvdEntry} to a {@link Vulnerability}.
     *
     * @param entry The {@link NvdEntry} to be converted.
     * @return An instance of {@link Vulnerability}.
     */
    public static Builder from(NvdEntry entry) {
      Objects.requireNonNull(entry, "Oh no! NVD entry is null");

      Builder builder = new Builder();
      builder.id = entry.getCve().getCveDataMeta().getId();

      builder.description = entry.getCve().getDescription().getDescriptionData().stream()
          .map(LangString::getValue).collect(Collectors.joining("\n\n"));

      builder.cvss = cvssFrom(entry);

      builder.references = new ArrayList<>();

      for (ReferenceLink r : entry.getCve().getReferences().getReferenceData()) {
        try {
          builder.references.add(new Reference(r.getName(), new URL(r.getUrl())));
        } catch (MalformedURLException e) {
          LOGGER.warn("Could not parse a URL from a reference in NVD", e);
        }
      }

      // we make an assumption here that the vulnerability is fixed
      // since most of vulnerabilities in the NVD are fixed
      builder.resolution = Resolution.PATCHED;

      builder.published = date(entry.getPublishedDate());

      builder.vulnerableVersions = extractVersions(entry);

      return builder;
    }

    private static List<VersionRange> extractVersions(NvdEntry entry) {
      if (entry.getConfigurations() == null || entry.getConfigurations().getNodes() == null) {
        return Collections.emptyList();
      }

      return entry.getConfigurations().getNodes().stream()
          .map(Node::getCpeMatches)
          .filter(Objects::nonNull)
          .flatMap(cpes -> cpes.stream().filter(Objects::nonNull))
          .map(Builder::createVersionRange)
          .collect(Collectors.toList());
    }

    private static VersionRange createVersionRange(CpeMatch cpe) {
      return new VersionRange(cpe.versionStartIncluding(), cpe.versionEndIncluding());
    }

    /**
     * Set a description for the vulnerability.
     *
     * @param text The description.
     * @return The same builder.
     */
    public Builder description(String text) {
      Objects.requireNonNull(text, "Oh no! Description is null");
      description = text;
      return this;
    }

    /**
     * Set a date when the vulnerability was introduced.
     *
     * @param date The date.
     * @return The same builder.
     */
    public Builder introduced(Date date) {
      Objects.requireNonNull(date, "Oh no! Date is null");
      introduced = date;
      return this;
    }

    /**
     * Set a date when the vulnerability was fixed.
     *
     * @param date The date.
     * @return The same builder.
     */
    public Builder fixed(Date date) {
      Objects.requireNonNull(date, "Oh no! Date is null");
      fixed = date;
      return this;
    }

    /**
     * Set a date when the vulnerability was published.
     *
     * @param date The date.
     * @return The same builder.
     */
    public Builder published(Date date) {
      Objects.requireNonNull(date, "Oh no! Date is null");
      published = date;
      return this;
    }

    /**
     * Set a CVSS score.
     *
     * @param cvss The CVSS score.
     * @return The same builder.
     */
    public Builder set(CVSS cvss) {
      this.cvss = cvss;
      return this;
    }

    /**
     * Set a resolution status.
     *
     * @param resolution The resolution status.
     * @return The same builder.
     */
    public Builder set(Resolution resolution) {
      this.resolution = Objects.requireNonNull(resolution, "Null is not a resolution!");
      return this;
    }

    /**
     * Set a list of references.
     *
     * @param references The references.
     * @return The same builder.
     */
    public Builder references(List<Reference> references) {
      this.references = Objects.requireNonNull(references, "Oh no! References is null!");
      return this;
    }

    /**
     * Set a list of versionRanges.
     *
     * @param versionRanges The versionRanges.
     * @return The same builder.
     */
    public Builder versionRanges(List<VersionRange> versionRanges) {
      Objects.requireNonNull(versionRanges, "Oh no! VersionRange is null!");
      this.vulnerableVersions = versionRanges;
      return this;
    }

    /**
     * Set that it's not known when the vulnerability was fixed.
     *
     * @return The same builder.
     */
    public Builder noFixDate() {
      fixed = UNKNOWN_FIXED_DATE;
      return this;
    }

    /**
     * Create an instance of {@link Vulnerability}.
     *
     * @return A new instance of {@link Vulnerability}.
     */
    public Vulnerability make() {
      return new Vulnerability(
          id, description, cvss, references, resolution, introduced, fixed, published,
          vulnerableVersions);
    }

    /**
     * Extracts a CVSS score from an NVD entry.
     *
     * @param entry The NVD entry.
     * @return The CVSS score.
     */
    private static CVSS cvssFrom(NvdEntry entry) {
      Impact impact = entry.getImpact();
      if (impact == null) {
        return null;
      }

      if (impact.getBaseMetricV3() != null) {
        CVSSv3 cvssV3 = entry.getImpact().getBaseMetricV3().getCVSSv3();
        return new CVSS.V3(
            cvssV3.getBaseScore(),
            get(cvssV3.confidentialityImpact()),
            get(cvssV3.integrityImpact()),
            get(cvssV3.availabilityImpact()));
      }

      if (impact.getBaseMetricV2() != null) {
        CVSSv2 cvssV2 = entry.getImpact().getBaseMetricV2().getCVSSv2();
        return new CVSS.V2(cvssV2.getBaseScore(),
            get(cvssV2.confidentialityImpact()),
            get(cvssV2.integrityImpact()),
            get(cvssV2.availabilityImpact()));
      }

      return null;
    }
  }

  /**
   * Convert {@link CVSSv3.CiaType} to {@link CVSS.V3.Impact}.
   *
   * @param impact The impact to be converted.
   * @return A converted impact.
   */
  private static CVSS.V3.Impact get(CVSSv3.CiaType impact) {
    if (impact == null) {
      return CVSS.V3.UNKNOWN_IMPACT;
    }

    return CVSS.V3.Impact.valueOf(impact.value());
  }

  /**
   * Convert {@link CVSSv2.CiaType} to {@link CVSS.V2.Impact}.
   *
   * @param impact The impact to be converted.
   * @return A converted impact.
   */
  private static CVSS.V2.Impact get(CVSSv2.CiaType impact) {
    if (impact == null) {
      return CVSS.V2.UNKNOWN_IMPACT;
    }

    return CVSS.V2.Impact.valueOf(impact.value());
  }
}
